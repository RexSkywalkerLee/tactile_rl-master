# used to create the object
name: AllegroArmMOAR

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env:
  rewardType: "finger" #["free", "constrain"]
  sensor: "thick" # can be ["normal", "large"]
  objInit: "new"
  objSet: "27"
  skill_step: 500
  spin_coef: 1.0
  main_coef: 0.0
  aux_coef: 0.0
  vel_coef: -0.1
  contact_coef: 0.0
  torque_coef: -0.0003
  work_coef: -0.0003
  finger_coef: 0.1
  handInit: "default"
  numEnvs: 8192 #${resolve_default:16384,${...num_envs}}
  envSpacing: 0.75
  episodeLength: 500
  enableDebugVis: False
  aggregateMode: 1
  sensorThresh: 1.0
  sensorNoise: 0.1
  obs_stack: 4
  latency: 0.2
  m_low: 0.2
  m_up: 0.6
  useInitRandomRotation: False

  force_debug: False
  numTestEnvs: 16
  test:
    test_m_low: 0.1
    test_m_up: 1.4

  robotStiffness: 3.0
  clipObservations: 5.0
  clipActions: 1.0

  stiffnessScale: 1.0
  forceLimitScale: 1.0
  relScale: 0.2 # relative motion scale
  useRelativeControl: True
  usePrevTarget: False
  dofSpeedScale: 20.0
  actionsMovingAverage: 0.8
  controlFrequencyInv: 6 # 10 Hz

  startPositionNoise: 0.01 #0.015
  startRotationNoise: 0.0

  resetPositionNoise: 0.01 #0.015
  resetRotationNoise: 0.0
  resetDofPosRandomInterval: 0.2
  resetDofVelRandomInterval: 0.0

  # Random forces applied to the object
  forceScale: 2.0
  forceProbRange: [0.2, 0.25]
  forceDecay: 0.99
  forceDecayInterval: 0.10
  disableSet: 0

  # reward -> dictionary
  axis: "z"
  distRewardScale: -3.0
  rotRewardScale: 1.0
  rotEps: 0.1
  actionPenaltyScale: 0.0
  controlPenaltyScale: -0.0
  reachGoalBonus: 250
  fallDistance: 0.10
  fallPenalty: -50.0

  objectType: "block" # can be block, egg or pen
  # observationType: "partial_stack" # can be "no_vel", "full_state"
  observationType: "ps_w_sensorpos"
  asymmetric_observations: True
  successTolerance: 0.1
  printNumSuccesses: False
  maxConsecutiveSuccesses: 0

  asset:
    assetFileName: "urdf/xarm6/xarm6_allegro_left_fsr.urdf"
    assetFileNameBlock: "urdf/objects/cube_multicolor_allegro.urdf"
    assetFileNameEgg: "mjcf/open_ai_assets/hand/egg.xml"
    assetFileNamePen: "mjcf/open_ai_assets/hand/pen.xml"

task:
  randomize: True
  randomization_params:
    frequency: 1000   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .05] #[0, .002] # range for the white noise
      range_correlated: [0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [0., .04]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    sim_params:
      gravity:
        range: [0, 0.3]
        operation: "additive"
        distribution: "gaussian"
        # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        # schedule_steps: 40000
    actor_params:
      hand:
        color: True
        dof_properties:
#          damping:
#            range: [0.3, 3.0]
#            operation: "scaling"
#            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          stiffness:
            range: [0.75, 1.5]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          lower:
            range: [0, 0.00001]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          upper:
            range: [0, 0.00001]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
#        rigid_body_properties:
#          mass:
#            range: [0.5, 1.5]
#            operation: "scaling"
#            distribution: "uniform"
#            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
#            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            # schedule_steps: 30000
#        rigid_shape_properties:
#          friction:
#            num_buckets: 250
#            range: [0.7, 1.3]
#            operation: "scaling"
#            distribution: "uniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
#      object:
#        scale:
#          range: [0.1, 0.2]
#          operation: "scaling"
#          distribution: "uniform"
#          setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
#          # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
#          # schedule_steps: 30000
#        rigid_body_properties:
#          mass:
#            range: [0.3, 3.0]
#            operation: "scaling"
#            distribution: "uniform"
#            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
#            # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
#            # schedule_steps: 30000
#        rigid_shape_properties:
#          friction:
#            num_buckets: 250
#            range: [0.3, 3.0]
#            operation: "scaling"
#            distribution: "uniform"
#            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            # schedule_steps: 30000

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.01667 #1667 # 1/60
  substeps: 2 # Previous = 1
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)
